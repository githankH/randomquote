{"version":3,"sources":["QuoteApi.js","QuoteView.js","QuoteAction.js","App.js","QuoteReducer.js","index.js"],"names":["axios","create","baseURL","connect","state","quote","getRandomQuote","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","resp","_resp$data","content","author","wrap","_context","prev","next","QuoteApi","get","sent","data","console","log","type","payload","stop","_x","apply","this","arguments","props","react_default","createElement","className","id","concat","class","href","onClick","App","src_QuoteView","combineReducers","length","undefined","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","querySelector"],"mappings":"+NAMeA,WAAMC,OAAO,CACxBC,QAAQ,6BCiDGC,cATS,SAACC,GAAD,MAAU,CAChCC,MAAOD,EAAMC,QAQwB,CAACC,eCtDX,iCAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAK,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACbC,EAASC,IAAI,WADA,OAC1BT,EAD0BK,EAAAK,KAAAT,EAEPD,EAAKW,KAAvBT,EAFyBD,EAEzBC,QAAQC,EAFiBF,EAEjBE,OACfS,QAAQC,IAAIb,GACZD,EAAS,CACLe,KAAM,cACNC,QAAS,CAACb,UAAQC,YANU,wBAAAE,EAAAW,SAAAlB,MAAL,gBAAAmB,GAAA,OAAAzB,EAAA0B,MAAAC,KAAAC,YAAA,KDsDdhC,CAlDG,SAACiC,GACjB,OACEC,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,WAAWC,GAAG,aAC3BH,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,QACbF,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,WACbF,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,SAASC,GAAG,QAA3B,IAAoCJ,EAAM/B,MAAMY,SAChDoB,EAAA1B,EAAA2B,cAAA,OAAKC,UAAU,cAAcC,GAAG,UAAhC,OAAAC,OAAiDL,EAAM/B,MAAMa,OAA7D,UAEFmB,EAAA1B,EAAA2B,cAAA,OAAKI,MAAM,qCAEXL,EAAA1B,EAAA2B,cAAA,OAAKI,MAAM,aACTL,EAAA1B,EAAA2B,cAAA,KAAGK,KAAK,oCACRN,EAAA1B,EAAA2B,cAAA,KAAGI,MAAM,mBAGXL,EAAA1B,EAAA2B,cAAA,OAAKI,MAAM,aACTL,EAAA1B,EAAA2B,cAAA,KAAGK,KAAK,2CACRN,EAAA1B,EAAA2B,cAAA,KAAGI,MAAM,kBAIXL,EAAA1B,EAAA2B,cAAA,OAAKI,MAAM,YAAYF,GAAG,YAAYI,QAASR,EAAM9B,gBACnD+B,EAAA1B,EAAA2B,cAAA,KAAGI,MAAM,qCEhBJG,EARH,WACR,OACIR,EAAA1B,EAAA2B,cAAA,OAAMC,UAAU,gBAChBF,EAAA1B,EAAA2B,cAACQ,EAAD,QCIOC,cAAgB,CAC3B1C,MAViB,WAAwD,IAAvDD,EAAuD+B,UAAAa,OAAA,QAAAC,IAAAd,UAAA,GAAAA,UAAA,GAAjD,CAAClB,QAAQ,aAAaC,OAAO,WAAWgC,EAASf,UAAAa,OAAA,EAAAb,UAAA,QAAAc,EAC3E,OAAOC,EAAOrB,MACZ,IAAK,cACH,OAAOqB,EAAOpB,QAChB,QACE,OAAO1B,MCEP+C,EAAQC,YAAYC,EAASC,YAAgBC,MACnDC,IAASC,OACTpB,EAAA1B,EAAA2B,cAACoB,EAAA,EAAD,CAAUP,MAAOA,GACfd,EAAA1B,EAAA2B,cAACqB,EAAD,OAEAC,SAASC,cAAc","file":"static/js/main.675f9948.chunk.js","sourcesContent":["import axios from 'axios';\n/* \nsource: https://github.com/lukePeavey/quotable \napi: https://api.quotable.io/random\n*/\n\nexport default axios.create({\n    baseURL:'https://api.quotable.io/'\n});","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {fetchOneQuote} from './QuoteAction';\n\n\nconst QuoteView = (props)=>{\n  return(\n    <div className='ui cards' id=\"quote-box\">\n      <div className='card'>\n        <div className='content'>\n          <div className='header' id=\"text\"> {props.quote.content}</div>\n          <div className='description' id='author'>{`~~~ ${props.quote.author} ~~~`}</div>\n        </div>\n        <div class=\"ui three bottom attached  buttons\">\n        \n        <div class=\"ui button\" >\n          <a href='https://twitter.com/intent/tweet' >\n          <i class=\"twitter icon\" />\n          </a>\n        </div>\n        <div class=\"ui button\" >\n          <a href='https://github.com/githankH/randomquote' >\n          <i class=\"github icon\" />\n          </a>\n        </div>\n\n        <div class=\"ui button\" id='new-quote' onClick={props.getRandomQuote}>\n          <i class=\"hand point up outline icon\" />\n        </div>\n        </div>\n      </div>\n    </div>\n\n    /*<div>\n      <div id=\"text\">\n        <h1>{props.quote.content}</h1>\n      </div>\n      <div id=\"author\">\n      <h5>{`~~~ ${props.quote.author} ~~~`}</h5>\n      </div>\n      <button id='new-quote' onClick={props.getRandomQuote}>random</button>\n      <a href='https://twitter.com/intent/tweet' >tweet it</a>\n    </div>*/\n  );\n}\n\nconst mapStateToProps = (state)=>({\n  quote: state.quote,\n});\n/*\nconst mapDispatchToProps = (dispatch)=>({\n    getRandomQuote: ()=>dispatch(fetchOneQuote())\n});\nexport default connect(mapStateToProps,mapDispatchToProps)(QuoteView);\n*/\nexport default connect(mapStateToProps,{getRandomQuote:fetchOneQuote})(QuoteView);\n","import QuoteApi from './QuoteApi';\n\nexport const fetchOneQuote = ()=> async (dispatch) => {\n  const resp = await QuoteApi.get('/random')\n  const {content,author} = resp.data;\n  console.log(resp);\n  dispatch({        \n      type: 'FETCH_QUTOE',\n      payload: {content,author},\n  });\n}\n/*\nexport const fetchDefaultQuote = () => {\n    return ({\n        type: 'FETCH_QUTOE',\n        payload: 'what the quote !!'\n    });\n};*/","import React from 'react';\n\nimport QuoteView from './QuoteView';\n\nconst App = ()=>{\n    return(\n        <div  className='ui container' >\n        <QuoteView />\n        </div>\n    );\n}\n\nexport default App;","import {combineReducers} from 'redux';\n\nconst quoteReducer = (state={content:'hi there !',author:'someone'},action)=>{\n  switch(action.type){\n    case 'FETCH_QUTOE':\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n    quote: quoteReducer,\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport reducers from './QuoteReducer';\n\nconst store = createStore(reducers,applyMiddleware(thunk));\nReactDOM.render(\n<Provider store={store} >\n  <App />\n</Provider>\n, document.querySelector('#root')\n);\n"],"sourceRoot":""}